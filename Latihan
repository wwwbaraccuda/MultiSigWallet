// SPDX-License-Identifier: MIT

pragma solidity ^0.8.9;

contract MultiSigWallet {

    address[] owners;
    uint totalrequiredsignature;

    struct Transaction {
        address to;
        uint value;
        bytes data;
        bool executed;
        mapping(address => bool) signatures;
    }

    Transaction[] private transactions;
    
    constructor(address[] memory _owners, uint _totalrequiredsignature) {
        require(_owners.length > 0, "Input owner");
        require(_totalrequiredsignature == _owners.length, "Signature Kurang" );

        owners = _owners;
        totalrequiredsignature = _totalrequiredsignature;
    }

    function submitTransaction(address _to, uint _value, bytes memory _data) public {
        uint txIndex = transactions.length;

        transactions.push();

        Transaction storage transaction = transactions[txIndex];
        transaction.to = _to;
        transaction.value = _value;
        transaction.data = _data;
        transaction.executed = false;
    }

    function getTransaction(uint txIndex) public view returns(address _to, uint _value, bytes memory _data) {
        Transaction storage transaction = transactions[txIndex];
        return(transaction.to, transaction.value, transaction.data);
    }
}
